package com.informalware.footylens

import com.informalware.footylens.data.*
import com.informalware.footylens.plugins.configureRouting
import com.informalware.footylens.plugins.connectFooty
import com.informalware.footylens.plugins.users
import io.ktor.client.call.*
import io.ktor.client.plugins.*
import io.ktor.client.request.*
import io.ktor.client.statement.*
import io.ktor.http.*
import io.ktor.serialization.kotlinx.json.*
import io.ktor.server.application.*
import io.ktor.server.plugins.cors.routing.*
import io.ktor.server.testing.*
import kotlinx.serialization.builtins.serializer
import kotlinx.serialization.json.Json
import org.ktorm.dsl.deleteAll
import org.ktorm.dsl.insert
import kotlin.test.*

data class User(val username: String, val display: String, val email: String, val password: String) {
    infix fun eq(other: User): Boolean = username == other.username && display == other.display && email == other.email && password == other.password
}

fun Map<String, String>.intoUser(): User = User(
    this["username"] ?: error("Missing username"),
    this["display"] ?: error("Missing display"),
    this["email"] ?: error("Missing email"),
    this["password"] ?: error("Missing password"),
)

class ApplicationTest {
    @BeforeTest
    fun setup() {
        val database = connectFooty()
        listOf(Commentaries,
            Reviews,
            Events,
            TeamsFollows,
            Follows,
            Matches,
            Teams,
            Users
        ).forEach { database.deleteAll(it) }
    }

    @Test
    fun testHelloWorld() = testApplication {
        application { configureRouting() }
        client.get("/").apply {
            assertEquals(HttpStatusCode.OK, status)
            assertEquals("Hello, World!", bodyAsText())
        }
    }
    @Test
    fun testUsers() = testApplication {
        application {
            this.install(io.ktor.server.plugins.contentnegotiation.ContentNegotiation) { json() }
            configureRouting()
        }

        val client = createClient {
            this.install(io.ktor.client.plugins.contentnegotiation.ContentNegotiation) {
                json()
            }
        }

        val users = listOf(
            User("test", "Test", "test@mail.com", "testpass"),
        )

        users.forEachIndexed { id, user ->
            client.post("/users") {
                contentType(ContentType.Application.Json)
                setBody(UserRegistryRequest(user.username, user.password, user.display, user.email))
            }.apply {
                assertEquals(HttpStatusCode.Created, status)
            }

            client.get("/users/${id + 1}").apply {
                assertEquals(HttpStatusCode.OK, status)
                assert(body<Map<String, String>>().intoUser() eq user)
            }
        }
    }
}
