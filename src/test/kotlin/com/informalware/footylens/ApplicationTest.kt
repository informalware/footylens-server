package com.informalware.footylens

import com.informalware.footylens.data.*
import com.informalware.footylens.plugins.configureRouting
import com.informalware.footylens.plugins.connectFooty
import io.ktor.client.call.*
import io.ktor.client.request.*
import io.ktor.client.statement.*
import io.ktor.http.*
import io.ktor.serialization.kotlinx.json.*
import io.ktor.server.application.*
import io.ktor.server.testing.*
import org.ktorm.dsl.deleteAll
import org.ktorm.dsl.insert
import org.ktorm.dsl.update
import org.ktorm.expression.*
import org.ktorm.schema.BooleanSqlType
import org.ktorm.schema.IntSqlType
import org.ktorm.schema.SqlType
import kotlin.test.*

data class User(val username: String, val display: String, val email: String, val password: String) {
    infix fun eq(other: User): Boolean = username == other.username && display == other.display && email == other.email && password == other.password
}

data class Team(val name: String, val league: String) {
    infix fun eq(other: Team): Boolean = name == other.name && league == other.league
}

fun Map<String, String>.intoUser(): User = User(
    this["username"] ?: error("Missing username"),
    this["display"] ?: error("Missing display"),
    this["email"] ?: error("Missing email"),
    this["password"] ?: error("Missing password"),
)

fun Map<String, String>.intoTeam(): Team = Team(
    this["name"] ?: error("Missing name"),
    this["league"] ?: error("Missing league"),
)

class ApplicationTest {
    @BeforeTest
    fun setup() {
        val database = connectFooty(testing = true)
        listOf(Commentaries,
            Reviews,
            Events,
            TeamsFollows,
            Follows,
            Matches,
            Teams,
            Users
        ).forEach { database.deleteAll(it) }

        database.useConnection { conn ->
            conn.prepareStatement("select setval('users_id_seq', 1, false);").execute()
            conn.prepareStatement("select setval('teams_id_seq', 1, false);").execute()
            conn.prepareStatement("select setval('matches_id_seq', 1, false);").execute()
            conn.prepareStatement("select setval('events_id_seq', 1, false);").execute()
            conn.prepareStatement("select setval('reviews_id_seq', 1, false);").execute()
            conn.prepareStatement("select setval('commentaries_id_seq', 1, false);").execute()
        }
    }

    private fun mockUsers(insert: Boolean = false): List<User> {
        val users: List<User> = listOf(
            User("johnDoe1", "John Doe 1", "john.doe1@example.com", "johnPassword1"),
            User("johnDoe2", "John Doe 2", "john.doe2@example.com", "johnPassword2"),
            User("johnDoe3", "John Doe 3", "john.doe3@example.com", "johnPassword3"),
            User("johnDoe4", "John Doe 4", "john.doe4@example.com", "johnPassword4"),
            User("johnDoe5", "John Doe 5", "john.doe5@example.com", "johnPassword5"),
            User("johnDoe6", "John Doe 6", "john.doe6@example.com", "johnPassword6"),
            User("johnDoe7", "John Doe 7", "john.doe7@example.com", "johnPassword7"),
            User("johnDoe8", "John Doe 8", "john.doe8@example.com", "johnPassword8"),
            User("johnDoe9", "John Doe 9", "john.doe9@example.com", "johnPassword9"),
            User("johnDoe10", "John Doe 10", "john.doe10@example.com", "johnPassword10")
        )

        if (insert) {
            val database = connectFooty(testing = true)

            users.forEach { user ->
                database.insert(Users) {
                    set(it.username, user.username)
                    set(it.display, user.display)
                    set(it.email, user.email)
                    set(it.password, user.password)
                    set(it.bio, "Hello I'm using Footylens")
                }
            }
        }

        return users
    }

    private fun mockTeams(insert: Boolean = false): List<Team> {
        val database = connectFooty(testing = true)

        val teams = listOf(
            Team("Flamengo", "Brasileirao"),
            Team("Fluminense", "Brasileirao"),
            Team("Corinthians", "Brasileirao"),
            Team("Palmeiras", "Brasileirao"),
            Team("Barcelona", "LaLiga"),
            Team("Real Madrid", "LaLiga"),
            Team("Manchester City", "Premier League"),
            Team("Manchester United", "Premier League"),
            Team("Liverpool", "Premier League"),
            Team("Chelsea", "Premier League"),
            Team("Tottenham", "Premier League"),
            Team("Arsenal", "Premier League"),
        )

        if (insert) {
            teams.forEach { (name, league) ->
                database.insert(Teams) {
                    set(it.name, name)
                    set(it.league, league)
                }
            }
        }

        return teams
    }

    @Test
    fun testHelloWorld() = testApplication {
        application { configureRouting() }
        client.get("/").apply {
            assertEquals(HttpStatusCode.OK, status)
            assertEquals("Hello, World!", bodyAsText())
        }
    }
    @Test
    fun testUsers() = testApplication {
        application {
            this.install(io.ktor.server.plugins.contentnegotiation.ContentNegotiation) { json() }
            configureRouting(testing = true)
        }

        val client = createClient {
            this.install(io.ktor.client.plugins.contentnegotiation.ContentNegotiation) {
                json()
            }
        }

        val users = mockUsers()

        users.forEachIndexed { id, user ->
            // Create user
            client.post("/users") {
                contentType(ContentType.Application.Json)
                setBody(UserRegistryRequest(user.username, user.password, user.display, user.email))
            }.apply {
                assertEquals(HttpStatusCode.Created, status)
            }

            // Get user
            client.get("/users/${id + 1}").apply {
                assertEquals(HttpStatusCode.OK, status)
                assert(body<Map<String, String>>().intoUser() eq user)
            }

            var username: String? = null;
            // Get the username of a user
            client.get("/users/${id + 1}/username").apply {
                assertEquals(HttpStatusCode.OK, status)
                username = body<Map<String, String>>()["username"]
                assertNotNull(username)
                assertEquals(user.username, username)
            }

            // Get user by username
            client.get("/users/@$username").apply {
                assertEquals(HttpStatusCode.OK, status)
                assert(body<Map<String, String>>().intoUser() eq user)
            }
        }
    }

    @Test
    fun testFollows() = testApplication {
        application {
            this.install(io.ktor.server.plugins.contentnegotiation.ContentNegotiation) { json() }
            configureRouting(testing = true)
        }

        val client = createClient {
            this.install(io.ktor.client.plugins.contentnegotiation.ContentNegotiation) { json() }
        }

        // 0 indexed
        val users: List<User> = mockUsers()
        // 1 indexed
        val followsRels: List<Pair<Int, Int>> = listOf(
            1 to 2,
            1 to 4,
            1 to 6,
            2 to 1,
            2 to 5,
            2 to 9,
            3 to 1,
            3 to 4,
        )
        val followsTable = mutableMapOf<Int, MutableList<Int>>()
        val followersTable = mutableMapOf<Int, MutableList<Int>>()


        users.forEach { user ->
            // Create user
            client.post("/users") {
                contentType(ContentType.Application.Json)
                setBody(UserRegistryRequest(user.username, user.password, user.display, user.email))
            }.apply {
                assertEquals(HttpStatusCode.Created, status)
            }
        }

        followsRels.forEach { (follower, follows) ->
            followsTable.getOrPut(follower) { mutableListOf() }.add(follows)
            followersTable.getOrPut(follows) { mutableListOf() }.add(follower)

            // Create follow relation
            client.post("/users/$follower/follows") {
                contentType(ContentType.Application.Json)
                setBody(mapOf("follows_id" to follows))
            }.apply {
                assertEquals(HttpStatusCode.OK, status)
            }
        }

        users.forEachIndexed { id, _ ->
            // Get follows
            client.get("/users/${id+1}/follows").apply {
                assertEquals(HttpStatusCode.OK, status)
                val follows = body<Map<String, List<Int>>>()["follows"]!!
                val expectedFollows = followsTable[id+1] ?: emptyList()
                assertEquals(expectedFollows.sorted(), follows.sorted())
            }

            // Get followers
            client.get("/users/${id+1}/followers").apply {
                assertEquals(HttpStatusCode.OK, status)
                val followers = body<Map<String, List<Int>>>()["followers"]!!
                val expectedFollowers = followersTable[id+1] ?: emptyList()
                assertEquals(expectedFollowers.sorted(), followers.sorted())
            }
        }

    }

    @Test
    fun testTeams() = testApplication {
        application {
            this.install(io.ktor.server.plugins.contentnegotiation.ContentNegotiation) { json() }
            configureRouting(testing = true)
        }

        val client = createClient {
            this.install(io.ktor.client.plugins.contentnegotiation.ContentNegotiation) { json() }
        }

        val teams = mockTeams(insert = true)
        val users = mockUsers(insert = true)

        val follows = List(teams.size) { id ->
            id + 1 to (1..users.size).asSequence().shuffled().take((1..users.size).random()).toList()
        }

        (1..teams.size).forEach {
            client.get("/teams/$it").apply {
                assertEquals(HttpStatusCode.OK, status)
                assert(body<Map<String, String>>().intoTeam() eq teams[it-1])
            }
        }

        follows.forEach { (team, followers) ->
            followers.forEach {
                client.post("/users/$it/teams") {
                    contentType(ContentType.Application.Json)
                    setBody(mapOf("team_id" to team))
                }.apply {
                    assertEquals(HttpStatusCode.OK, status)
                }
            }
        }
    }
}
