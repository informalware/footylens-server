package com.informalware.footylens.data

import kotlinx.serialization.Serializable
import org.ktorm.entity.Entity
import org.ktorm.schema.*

/**
 * Table do Ktorm para os usuários
 * */
object Users : Table<User>("User") {
    val id = int("id").primaryKey().bindTo { it.id }
    val username = varchar("username").bindTo { it.username }
    val password = varchar("password").bindTo { it.password }
    val display = varchar("display").bindTo { it.display }
    val email = varchar("email").bindTo { it.email }
    val bio = varchar("bio").bindTo { it.bio }
}

/**
 * Objeto que representa um usuário armazenado no banco de dados
 * @property username nome do usuário, usado como PK pelo DB
 * @property display nome de exibição do usuário usado no frontend
 * @property email email do usuário
 * @property bio descrição do usuário exibida no seu perfil no frontend
 *
 * */
@Serializable
sealed interface User : Entity<User> {
    companion object : Entity.Factory<User>()
    val id: Int
    val password: String
    val username: String
    val display: String
    val email: String
    val bio: String
}

/**
 * Estrutura recebida pelo endpoint de registro para cadastrar um novo usuário
 * */
@Serializable
data class UserRegistryRequest(
    val username: String,
    val password: String,
    val display: String,
    val email: String
)

/**
 * Tabela que representa o relacionamento de follow entre os usuários
 * @property user_id id do usuário
 * @property follower_id id de um seguidor do usuário `user_id`
 * */
object Follows : Table<UserFollows> ("UserFollows") {
    val user_id = int("user_id").bindTo { it.user_id }
    val follower_id = int("follower_id").bindTo { it.follower_id }
}

sealed interface UserFollows : Entity<UserFollows> {
    companion object : Entity.Factory<UserFollows>()
    val user_id: Int
    val follower_id: Int
}