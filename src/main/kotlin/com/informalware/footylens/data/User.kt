package com.informalware.footylens.data

import kotlinx.serialization.Serializable
import org.ktorm.dsl.QueryRowSet
import org.ktorm.entity.Entity
import org.ktorm.schema.*
import kotlin.reflect.KClass

/**
 * Table do Ktorm para os usuários
 * */
object Users : BaseTable<User>("users") {
    val id = int("id").primaryKey()
    val username = varchar("username")
    val password = varchar("password")
    val display = varchar("display")
    val email = varchar("email")
    val bio = varchar("bio")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): User = User(
        id = row[id] ?: 0,
        password = row[password].orEmpty(),
        username = row[username].orEmpty(),
        display = row[display].orEmpty(),
        email = row[email].orEmpty(),
        bio = row[bio].orEmpty()
    )
}

/**
 * Objeto que representa um usuário armazenado no banco de dados
 * @property username nome do usuário, usado como PK pelo DB
 * @property display nome de exibição do usuário usado no frontend
 * @property email email do usuário
 * @property bio descrição do usuário exibida no seu perfil no frontend
 * */
@Serializable
data class User (
    //companion object : Entity.Factory<User>()
    val id: Int,
    val password: String,
    val username: String,
    val display: String,
    val email: String,
    val bio: String
)

/**
 * Estrutura recebida pelo endpoint de registro para cadastrar um novo usuário
 * */
@Serializable
data class UserRegistryRequest(
    val username: String,
    val password: String,
    val display: String,
    val email: String
)

/**
 * Tabela que representa o relacionamento de follow entre os usuários
 * @property user_id id do usuário
 * @property follower_id id de um seguidor do usuário `user_id`
 * */
object Follows : Table<UserFollows> ("userfollows") {
    val user_id = int("user_id").bindTo { it.user_id }
    val follower_id = int("follower_id").bindTo { it.follower_id }
}

sealed interface UserFollows : Entity<UserFollows> {
    companion object : Entity.Factory<UserFollows>()
    val user_id: Int
    val follower_id: Int
}