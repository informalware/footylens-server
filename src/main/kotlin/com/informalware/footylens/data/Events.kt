package com.informalware.footylens.data

import kotlinx.serialization.Serializable
import org.ktorm.dsl.QueryRowSet
import org.ktorm.schema.*

enum class EventTypes {
    YELLOW, RED, GOAL, PENALTY
}

/**
 * Objeto que representa eventos de uma partida
 * @property id Identificador único do evento.
 * @property event Tipo do evento.
 * @property time Data e hora do evento
 * @property playerId Identificador do jogador que participou do evento.
 * @property matchId Identificador da partida onde o evento ocorreu.
 * @property teamId Identificador do time do jogador envolvido no evento.
 * */
@Serializable
data class Event (
    val id: Int,
    val event: EventTypes,
    val time: Int,
    val playerId: Int,
    val matchId: Int,
    val teamId: Int
)

object Events : BaseTable<Event>("events") {
    val id = int("id").primaryKey()
    val event = int("event")
    val time = int("time")
    val playerId = int("playerId")
    val matchId = int("matchId")
    val teamId = int("teamId")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Event {
        return Event(
            id = row[id] ?: 0,
            event = EventTypes.entries[row[event] ?: 0],
            time = row[time] ?: 0,
            playerId = row[playerId] ?: 0,
            matchId = row[matchId] ?: 0,
            teamId = row[teamId] ?: 0
        )
    }
}


/**
 * Função para transformar um Enum em um Int
 * */
inline fun <reified T : Enum<T>> T.toInt(): Int {
    return this.ordinal
}
