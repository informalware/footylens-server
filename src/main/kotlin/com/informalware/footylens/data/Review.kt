package com.informalware.footylens.data

import com.informalware.footylens.data.util.DateSerializer
import kotlinx.serialization.Serializable
import org.ktorm.dsl.QueryRowSet
import org.ktorm.schema.*
import java.time.LocalDateTime

/**
 * Enum usada para definir a avaliação de uma `Review` sobre uma partida
 * */
@Serializable
enum class Rating : Comparable<Rating> {
    TERRIBLE,
    BAD,
    OK,
    GOOD,
    AMAZING
}

/**
 * Função utilitária para ordenar `Rating`s de reviews
 * TERRIBLE = 0
 * BAD = 1
 * OK = 2
 * GOOD = 3
 * AMAZING = 4
 * @return número entre 0 e 4 indicando o nível da partida
 * */
fun Rating.getOrder(): Int = when(this) {
    Rating.TERRIBLE -> 0
    Rating.BAD -> 1
    Rating.OK -> 2
    Rating.GOOD -> 3
    Rating.AMAZING -> 4
}

fun Int.toRating(): Rating = when(this) {
    0 -> Rating.TERRIBLE
    1 -> Rating.BAD
    2 -> Rating.OK
    3 -> Rating.GOOD
    4 -> Rating.AMAZING
    else -> Rating.TERRIBLE
}

/**
 * Objeto que representa uma review de uma partida
 * @property id número de identificação da ID no banco de dados
 * @property matchId número de identificação da partida a qual essa review se refere
 * @property matchId número de identificação do usuário que escreveu essa review
 * @property rating avaliação quantitativa dada pelo usuário
 * @property review avaliação qualitativa escrita pelo usuário
 * @property creationDate data de criação da review
 * @property lastModifiedDate data da última vez que a review foi modificada
 * */
object Reviews : BaseTable<Review>("reviews") {
    val id = int("id").primaryKey()
    val matchId = int("match_id")
    val userId = int("user_id")
    var rating = int("rating")
    var review = varchar("review")
    val creationDate = datetime("creation_date")
    var lastModifiedDate = datetime("modified_date")
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Review = Review(
        id = row[id] ?: 0,
        matchId = row[matchId] ?: 0,
        userId = row[userId] ?: 0,
        rating = row[rating]?.toRating() ?: Rating.TERRIBLE,
        review = row[review].orEmpty(),
        creationDate = row[creationDate] ?: LocalDateTime.MIN,
        lastModifiedDate = row[lastModifiedDate] ?: LocalDateTime.MIN
    )
}

@Serializable
data class Review (
    val id: Int,
    val matchId: Int,
    val userId: Int,
    var rating: Rating,
    var review: String,

    @Serializable (with = DateSerializer::class)
    val creationDate: LocalDateTime,
    @Serializable (with = DateSerializer::class)
    var lastModifiedDate: LocalDateTime
) {

    fun summarize(len: Int = MAX_SUMMARY_LENGTH): SummarizedReview {
        val len = if (len > 0) { len } else { MAX_SUMMARY_LENGTH }

        val summary = if (this.review.length <= len) {
            this.review
        } else {
            this.review
                .substring(0..<len)
                .plus("...")
        }

        return SummarizedReview(this.id, this.matchId, this.userId, this.rating, summary)
    }
}

@Serializable
data class SummarizedReview (
    val id: Int,
    val matchId: Int,
    val userId: Int,
    var rating: Rating,
    var review: String
)

@Serializable
data class ReviewRegistryRequest (
    val matchId: Int,
    val userId: Int,
    var rating: Int,
    var review: String
)