package com.informalware.footylens.data

import com.informalware.footylens.data.util.DateSerializer
import kotlinx.serialization.Serializable
import org.ktorm.dsl.QueryRowSet
import org.ktorm.schema.BaseTable
import org.ktorm.schema.datetime
import org.ktorm.schema.int
import org.ktorm.schema.varchar
import java.time.LocalDateTime
import java.util.*

object Commentaries : BaseTable<Commentary>("commentaries") {
    val id = int("id").primaryKey()
    val reviewId = int("review_id")
    val userId = int("user_id")
    var commentary = varchar("commentary")
    val creationDate = datetime("creation_date")
    var lastModifiedDate = datetime("modified_date")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Commentary = Commentary(
        id = row[id] ?: 0,
        reviewId = row[reviewId] ?: 0,
        userId = row[userId] ?: 0,
        commentary = row[commentary].orEmpty(),
        creationDate = row[Reviews.creationDate] ?: LocalDateTime.MIN,
        lastModifiedDate = row[Reviews.lastModifiedDate] ?: LocalDateTime.MIN
    )

}

/**
 * Objeto para representar um comentário em uma review
 * @property id identificador do comentário
 * @property reviewId identificador da review a qual o comentário se refere
 * @property commentary o comentário feito sobre a review
 * @property creationDate data da criação do comentário
 * @property lastModifiedDate data da última modificação do comentário
 * */
@Serializable
data class Commentary(
    val id: Int,
    val reviewId: Int,
    val userId: Int,
    var commentary: String,
    @Serializable(with = DateSerializer::class)
    val creationDate: LocalDateTime,
    @Serializable(with = DateSerializer::class)
    var lastModifiedDate: LocalDateTime
) {
    fun summarize(len: Int = MAX_SUMMARY_LENGTH): SummarizedCommentary {
        val len = if (len > 0) { len } else { MAX_SUMMARY_LENGTH }

        val summary = if (this.commentary.length < len) {
            this.commentary
        } else {
            this.commentary
                .substring(0..<len)
                .plus("...")
        }

        return SummarizedCommentary(id, reviewId, userId, summary)
    }
}

@Serializable
data class SummarizedCommentary(
    val id: Int,
    val reviewId: Int,
    val userId: Int,
    var commentary: String
)

@Serializable
data class CommentaryRegistryRequest(
    val reviewId: Int,
    val userId: Int,
    var commentary: String
)