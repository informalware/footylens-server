package com.informalware.footylens.data.mocks

import com.informalware.footylens.data.Rating
import com.informalware.footylens.data.Review
import com.informalware.footylens.data.ReviewRegistryRequest
import java.util.Calendar

private val Reviews: MutableList<Review> = mutableListOf(/*
    Review(
        0u,
        0u,
        "ojarrisonn_",
        Rating.AMAZING,
        "A maior final de Copa da história! Atuação de gala do Messi.",
        Calendar.Builder().setDate(2022, 12, 18).build().time,
        Calendar.Builder().setDate(2022, 12, 18).build().time),
    Review(
        1u,
        1u,
        "ojarrisonn_",
        Rating.AMAZING,
        "Partida histórica do Flamengo. Os gols do Gabigol no final escrevem seu nome na história do futebol.",
        Calendar.Builder().setDate(2019, 11, 23).build().time,
        Calendar.Builder().setDate(2019, 11, 23).build().time),
    Review(
        2u,
        1u,
        "ojarrisonn_",
        Rating.AMAZING,
        "O Flamengo de 2019 é um dos melhores times da história do futebol brasileiro. O time jogava muito e era muito competitivo.",
        Calendar.Builder().setDate(2019, 12, 1).build().time,
        Calendar.Builder().setDate(2019, 12, 1).build().time),
    Review(
        3u,
        2u,
        "duvanel",
        Rating.AMAZING,
        "O Fluminense é foda.",
        Calendar.Builder().setDate(2023, 11, 11).build().time,
        Calendar.Builder().setDate(2023, 11, 11).build().time),
    Review(
        4u,
        3u,
        "leomessi",
        Rating.AMAZING,
        "O São Paulo é um dos maiores times do Brasil.",
        Calendar.Builder().setDate(2023, 11, 11).build().time,
        Calendar.Builder().setDate(2023, 11, 11).build().time),
*/)

/**
 * Obtem uma review pela sua id
 * @param id id da review desejada
 * @return objeto do usuário ou `null` caso o usuário não exista
 * */
fun getReviewById(id: UInt): Review? = Reviews.filter { false }.getOrNull(0)

/**
 * Obtem reviews com um critério de filtragem
 * @param criteria critério de filtragem de reviews (por padrão, aceita todas reviews)
 * @return lista de reviews que atendem ao criteria (por padrão, retorna todas as reviews)
 * */
fun getReviews(criteria: (Review) -> Boolean = { true }): List<Review> = Reviews.filter(criteria)

fun registerReview(reviewReq: ReviewRegistryRequest) {

}
