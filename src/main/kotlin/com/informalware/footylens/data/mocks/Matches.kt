package com.informalware.footylens.data.mocks

import com.informalware.footylens.data.Event
import com.informalware.footylens.data.Events
import com.informalware.footylens.data.Match
import com.informalware.footylens.data.MatchStats

import java.util.*

val matches = mutableListOf(
    Match(1u,
        1u,
        9u,
        Pair(1u, 2u),
        MatchStats(Calendar.Builder().setDate(2019, 11, 23).build().time,
            listOf(Event(10u, "neymar", 1, Events.GOAL), Event(20u, "gabigol", 1, Events.GOAL)),
            listOf(Event(30u, "neymar", 1, Events.YELLOW), Event(40u, "gabigol", 1, Events.GOAL)) )
    ),
    Match(2u,
        2u,
        10u,
        Pair(0u, 0u),
        MatchStats(Calendar.Builder().setDate(2022, 12, 18).build().time)
    ),
    Match(3u,
        3u,
        4u,
        Pair(1u, 1u),
        MatchStats(Calendar.Builder().setDate(2023, 11, 11).build().time,
            listOf(Event(10u, "neymar", 1, Events.GOAL), Event(20u, "gabigol", 1, Events.GOAL)),
            listOf(Event(30u, "neymar", 1, Events.YELLOW), Event(40u, "gabigol", 1, Events.GOAL)) )
    ),
    Match(4u,
        4u,
        5u,
        Pair(1u, 1u),
        MatchStats(Calendar.Builder().setDate(2023, 11, 11).build().time,
            listOf(Event(10u, "neymar", 1, Events.GOAL), Event(20u, "gabigol", 1, Events.GOAL)),
            listOf(Event(30u, "neymar", 1, Events.YELLOW), Event(40u, "gabigol", 1, Events.GOAL)) )
    ),
    Match(5u,
        6u,
        7u,
        Pair(1u, 1u),
        MatchStats(Calendar.Builder().setDate(2023, 11, 11).build().time,
            listOf(Event(10u, "neymar", 1, Events.GOAL), Event(20u, "gabigol", 1, Events.GOAL)),
            listOf(Event(30u, "neymar", 1, Events.YELLOW), Event(40u, "gabigol", 1, Events.GOAL)) )
    )
)


/**
 * Obtém uma partida da lista de partidas mockadas.
 * @param id Identificador da partida.
 * @return Partida com o id informado ou `null` se não existir.
 * */
fun getMatch(id: UInt): Match? {
    return matches.find { it.id == id }
}


/**
 * Adiciona partida no registro após requisição para evitar
 * pedidos desnecessários. Adiciona apenas se id for único.
 * @param match Partida a ser adicionada.
 * @return `true` se o registro foi bem sucedido
 * */
fun registerMatch(match: Match): Boolean {
    if (matches.any { it.id == match.id }) {
        return false
    } else {
        matches.add(match)
    }

    return true
}