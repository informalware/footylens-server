package com.informalware.footylens.plugins

import com.informalware.footylens.data.*
import org.ktorm.database.Database
import org.ktorm.dsl.eq
import org.ktorm.entity.find
import org.ktorm.entity.sequenceOf

const val database_url = "jdbc:postgresql://localhost:5432/footylens"

val Database.users get() = this.sequenceOf(Users)
val Database.follows get() = this.sequenceOf(Follows)
val Database.reviews get() = this.sequenceOf(Reviews)
val Database.commentaries get() = this.sequenceOf(Commentaries)
val Database.teams get() = this.sequenceOf(Teams)
val Database.teamsfollows get() = this.sequenceOf(TeamsFollows)
val Database.matches get() = this.sequenceOf(Matches)
val Database.events get() = this.sequenceOf(Events)


/**
 * Função que verifica se um usuário existe pelo id
 * */
fun Database.validateUserById(id: Int): Boolean = this.users.find { Users.id eq id } != null
/**
 * Função que verifica se um usuário existe pelo seu username
 * */
fun Database.validateUserByUsername(username: String): Boolean = this.users.find { Users.username eq username } != null
/**
 * Função que verifica se uma review existe pelo id
 * */
fun Database.validateReviewById(id: Int): Boolean = this.reviews.find { Reviews.id eq id } != null
/**
 * Função que verifica se um comentário existe pelo id
 * */
fun Database.validateCommentaryById(id: Int): Boolean = this.commentaries.find { Commentaries.id eq id } != null

/**
 * Função que verifica se um time existe pelo id
 */
fun Database.validateTeamById(id: Int): Boolean = this.teams.find { Teams.id eq id } != null
/**
 * Função que verifica se um time existe pelo seu nome
 */
fun Database.validateTeamByName(name: String): Boolean = this.teams.find { Teams.name eq name } != null
/**
 * Função que verifica se uma partida existe pelo id
 */
fun Database.validateMatchById(id: Int): Boolean = this.matches.find { Matches.id eq id } != null


fun connectFooty(): Database = Database.connect(database_url, "org.postgresql.Driver", "footy", "senhasenha")
