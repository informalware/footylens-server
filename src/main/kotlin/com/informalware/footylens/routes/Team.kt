package com.informalware.footylens.routes

import com.informalware.footylens.data.*
import com.informalware.footylens.plugins.teams
import com.informalware.footylens.plugins.teamsfollows
import com.informalware.footylens.data.Team
import com.informalware.footylens.data.mocks.getTeam
import io.ktor.http.*
import io.ktor.server.application.*
import io.ktor.server.request.*
import io.ktor.server.response.*
import io.ktor.server.routing.*
import org.ktorm.database.Database
import org.ktorm.dsl.*
import org.ktorm.entity.filter
import org.ktorm.entity.filterColumns
import org.ktorm.entity.find
import org.ktorm.entity.map


fun Application.teamRoutes() {
    routing {
        get("/team/{id}") {
            call.parameters["id"]?.let {id ->
                val database = Database.connect("postgres://localhost:5432")

                val query = database.teams.find { Teams.id eq id.toInt() }

                if (query == null) {
                    call.respond(HttpStatusCode.NotFound, mapOf("error" to "$id is not a registered team"))
                } else {
                    val team = (query as Team)

                    call.respond(team)
                }
            }
        }
        get("/team/{id}/followers") {
            call.parameters["id"]?.let {id ->
                val database = Database.connect("postgres://localhost:5432")

                val query = database.teams.find { Teams.id eq id.toInt() }

                if (query == null) {
                    call.respond(HttpStatusCode.NotFound, mapOf("error" to "$id is not a registered team"))
                } else {
                    val follows = database.teamsfollows
                        .filter { TeamsFollows.team_id eq id.toInt() }
                        .map { it.follower_id }

                    call.respond(mapOf("followers" to follows))
                }
            }
        }
    }
}