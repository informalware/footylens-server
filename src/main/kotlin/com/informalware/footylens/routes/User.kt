package com.informalware.footylens.routes

import com.informalware.footylens.data.User
import com.informalware.footylens.data.UserRegistryRequest
import com.informalware.footylens.data.mocks.getUserFollowedBy
import com.informalware.footylens.data.mocks.getUserById
import com.informalware.footylens.data.mocks.registerUser
import io.ktor.http.*
import io.ktor.server.application.*
import io.ktor.server.request.*
import io.ktor.server.response.*
import io.ktor.server.routing.*

fun Application.userGetRoutes() {
    routing {
        // Obtém dados de um usuário
        get("/users/{id}") {
            call.parameters["id"]?.let {id ->
                when (val user = getUserById(id)) {
                    is User -> {
                        val req = call.receive<Map<String, List<String>>>()

                        // A request espera receber todas as propriedades do usuário
                        if (req["properties"].isNullOrEmpty()) {
                            call.respond(user)
                        } else { // A request que apenas uma parte das propriedades
                            call.respond(user.getPartial(req["properties"]!!))
                        }
                    }
                    null -> call.respond(HttpStatusCode.NotFound, mapOf("error" to "$id is not a registered user"))
                }
            }
        }
        // Obtém a lista de usuários sendo seguidos por um usuário
        get("/users/{id}/following") {
            call.parameters["id"]?.let {id ->
                when (val user = getUserById(id)) {
                    is User -> {
                        call.respond(user.followingList)
                    }
                    null -> call.respond(HttpStatusCode.NotFound, mapOf("error" to "$id is not a registered user"))
                }
            }
        }
        // Obtém a lista de usuários que seguem um usuário
        get("/users/{id}/followed") {
            call.parameters["id"]?.let {id ->
                when (getUserById(id)) {
                    is User -> {
                        call.respond(getUserFollowedBy(id))
                    }
                    null -> call.respond(HttpStatusCode.NotFound, mapOf("error" to "$id is not a registered user"))
                }
            }
        }
        // Obtém a lista de reviews feitas por um usuário
        get("/users/{id}/reviews") {
            call.parameters["id"]?.let {id ->
                when (val user = getUserById(id)) {
                    is User -> {
                        call.respond(user.reviewsList)
                    }
                    null -> call.respond(HttpStatusCode.NotFound, mapOf("error" to "$id is not a registered user"))
                }
            }
        }
        // Obtém a lista de comentários feitas por um usuário
        get("/users/{id}/commentaries") {
            call.parameters["id"]?.let {id ->
                when (val user = getUserById(id)) {
                    is User -> {
                        call.respond(user.commentariesList)
                    }
                    null -> call.respond(HttpStatusCode.NotFound, mapOf("error" to "$id is not a registered user"))
                }
            }
        }
    }
}

fun Application.userPostRoutes() {
    routing {
        // Registra um novo usuário
        post("/users") {
            val user = call.receive<UserRegistryRequest>().toUser()

            if (registerUser(user)) {
                call.respond(HttpStatusCode.Created, mapOf("ok" to true))
            } else {
                call.respond(HttpStatusCode.Conflict, mapOf("error" to "${user.username} is already registered"))
            }
        }
    }
}