package com.informalware.footylens.routes

import com.informalware.footylens.data.Review
import com.informalware.footylens.data.ReviewRegistryRequest
import com.informalware.footylens.data.mocks.getCommentariesFromReview
import com.informalware.footylens.data.mocks.getReviewById
import com.informalware.footylens.data.mocks.getUserById
import com.informalware.footylens.data.mocks.registerReview
import io.ktor.http.*
import io.ktor.server.application.*
import io.ktor.server.request.*
import io.ktor.server.response.*
import io.ktor.server.routing.*

fun Application.reviewGetRoutes() {
    routing {
        // Obtem uma review
        get("/reviews/{id}") {
            call.parameters["id"]?.let {id ->
                when (val review = getReviewById(id.toUInt())) {
                    is Review -> {
                        val body = call.receive<Map<String, Int>>()

                        if (body.containsKey("summarized")) {
                            if (body["summarized"]!! > 0) {
                                call.respond(review.toSummarized(body["summarized"]!!.toUInt()))
                            } else {
                                call.respond(review.toSummarized())
                            }
                        } else  {
                            call.respond(review)
                        }
                    }
                    null -> call.respond(HttpStatusCode.NotFound, mapOf("error" to "$id is not a review"))
                }
            }
        }
        // Obtem a lista de comentÃ¡rios de uma review
        get("/review/{id}/commentaries") {
            call.parameters["id"]?.let { id ->
                if (getReviewById(id.toUInt()) == null) {
                    call.respond(HttpStatusCode.NotFound, mapOf("error" to "$id is not a review"))
                } else {
                    call.respond(getCommentariesFromReview(id.toUInt()))
                }
            }
        }
    }
}

fun Application.reviewPostRoutes() {
    routing {
        post("/reviews") {
            val review = call.receive<ReviewRegistryRequest>()

            // TODO: check if the match exists

            if (getUserById(review.userId) == null) {
                call.respond(HttpStatusCode.NotFound, mapOf("error" to "${review.userId} is not a registered user"))
            } else {
                registerReview(review)

                call.respond(HttpStatusCode.Created, mapOf("ok" to true))
            }
        }
    }
}