package com.informalware.footylens.routes

import com.informalware.footylens.data.*
import com.informalware.footylens.plugins.reviews
import com.informalware.footylens.plugins.users
import io.ktor.http.*
import io.ktor.server.application.*
import io.ktor.server.request.*
import io.ktor.server.response.*
import io.ktor.server.routing.*
import org.ktorm.database.Database
import org.ktorm.dsl.eq
import org.ktorm.dsl.insert
import org.ktorm.entity.find
import java.time.LocalDateTime

fun Application.reviewGetRoutes() {
    routing {
        // Obtem uma review
        get("/reviews/{id}") {
            val database = Database.connect("jdbc:postgresql://localhost:5432/footylens", "org.postgresql.Driver", "footy", "senhasenha")

            call.parameters["id"]?.let {id ->
                val query = database.reviews.find { Reviews.id eq (id.toInt()) }

                if (query == null) {
                    call.respond(HttpStatusCode.NotFound, mapOf("error" to "$id is not a review"))
                } else {
                    val req = call.receive<Map<String, Int>>()
                    val review = (query as Review)

                    if (req.containsKey("summarized")) {
                        val len = req["summarized"]!!

                        call.respond(review.summarize(len))
                    } else {
                        call.respond(review)
                    }
                }
            }
        }
        // Obtem a lista de comentÃ¡rios de uma review
        get("/reviews/{id}/commentaries") {
            call.parameters["id"]?.let { id ->
                val database = Database.connect("jdbc:postgresql://localhost:5432/footylens", "org.postgresql.Driver", "footy", "senhasenha")
                val query = database.reviews.find { Reviews.id eq (id.toInt()) }

                if (query == null) {
                    call.respond(HttpStatusCode.NotFound, mapOf("error" to "$id is not a review"))
                } else {
                    // TODO: Implement the commentary tables
                    call.respond(HttpStatusCode.NotImplemented, "This feature is not implemented yet")
                }
            }
        }
    }
}

fun Application.reviewPostRoutes() {
    routing {
        post("/reviews") {
            val database = Database.connect("jdbc:postgresql://localhost:5432/footylens", "org.postgresql.Driver", "footy", "senhasenha")
            val review = call.receive<ReviewRegistryRequest>()

            // TODO: check if the match exists

            val query = database.users.find { Users.id eq review.userId }

            if (query == null) {
                call.respond(HttpStatusCode.NotFound, mapOf("error" to "${review.userId} is not a registered user"))
            } else {
                database.insert(Reviews) {
                    set(it.userId, review.userId)
                    set(it.matchId, review.matchId)
                    set(it.review, review.review)
                    set(it.rating, review.rating)
                    set(it.creationDate, LocalDateTime.now())
                    set(it.lastModifiedDate, LocalDateTime.now())
                }

                call.respond(HttpStatusCode.Created, mapOf("ok" to true))
            }
        }
    }
}