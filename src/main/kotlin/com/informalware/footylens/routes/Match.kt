package com.informalware.footylens.routes

import com.informalware.footylens.data.*
import com.informalware.footylens.data.Match
import com.informalware.footylens.data.mocks.getMatch
import com.informalware.footylens.plugins.matches
import io.ktor.http.*
import io.ktor.server.application.*
import io.ktor.server.request.*
import io.ktor.server.response.*
import io.ktor.server.routing.*
import org.ktorm.database.Database
import org.ktorm.dsl.*
import org.ktorm.entity.filter
import org.ktorm.entity.filterColumns
import org.ktorm.entity.find
import org.ktorm.entity.map


fun Application.matchGetRoutes() {
    routing {
        // ObtÃ©m dados da partida
        get("/match/{id}") {
            val database = Database.connect("postgres://localhost:5432")

            call.parameters["id"]?.let {id ->
                val query = database.matches.find { Matches.id eq (id.toInt()) }

                if (query == null) {
                    call.respond(HttpStatusCode.NotFound, mapOf("error" to "$id is not a registered match"))
                } else {
                    val req = call.receive<Map<String, List<String>>>()
                    val match = (query as Match)

                    call.respond(Match)
                }
            }
        }
        get("/match/{id}/scoreboard") {
            val database = Database.connect("postgres://localhost:5432")

            call.parameters["id"]?.let {id ->
                val query = database.matches.find { Matches.id eq (id.toInt()) }

                if (query == null) {
                    call.respond(HttpStatusCode.NotFound, mapOf("error" to "$id is not a registered match"))
                } else {
                    val req = call.receive<Map<String, List<String>>>()
                    val match = (query as Match)

                    call.respond(mapOf("home_scoreboard" to match.scoreboard.first, "visitor_scoreboard" to match.scoreboard.second))
                }
            }
        }
    }
}