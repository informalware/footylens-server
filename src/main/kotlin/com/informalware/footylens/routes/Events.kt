package com.informalware.footylens.routes

import com.informalware.footylens.data.EventRegistryRequest
import com.informalware.footylens.data.Events
import com.informalware.footylens.data.Matches
import com.informalware.footylens.plugins.connectFooty
import com.informalware.footylens.plugins.matches
import io.ktor.http.*
import io.ktor.server.application.*
import io.ktor.server.request.*
import io.ktor.server.response.*
import io.ktor.server.routing.*
import org.ktorm.dsl.eq
import org.ktorm.dsl.insert
import org.ktorm.entity.find

/**
 * Define as rotas de POST para eventos de uma partida
 * */
fun Application.eventPostRoutes() {
    routing {
        // Registra uma nova partida
        post("/matches/{id}/details") {
            val database = connectFooty()
            call.parameters["id"]?.let { id ->
                val req = call.receive<EventRegistryRequest>()
                val query = database.matches.find { Matches.id eq (id.toInt()) }

                if (query == null) {
                    call.respond(HttpStatusCode.NotFound, mapOf("error" to "$id is not a registered match"))
                } else {
                    database.insert(Events) {
                        set(it.event, req.event.ordinal)
                        set(it.moment, req.time)
                        set(it.player, req.player)
                        set(it.matchId, id.toInt())
                        set(it.teamId, req.teamId)
                    }
                    call.respond(HttpStatusCode.Created, mapOf("ok" to true))
                }
            }
        }
    }
}