package com.informalware.footylens.routes

import com.informalware.footylens.data.Commentaries
import com.informalware.footylens.data.Commentary
import com.informalware.footylens.data.CommentaryRegistryRequest
import com.informalware.footylens.data.Reviews
import com.informalware.footylens.plugins.*
import io.ktor.http.*
import io.ktor.server.application.*
import io.ktor.server.request.*
import io.ktor.server.response.*
import io.ktor.server.routing.*
import org.ktorm.dsl.eq
import org.ktorm.dsl.inList
import org.ktorm.dsl.insert
import org.ktorm.entity.filter
import org.ktorm.entity.find
import org.ktorm.entity.toList
import java.time.LocalDateTime

fun Application.commentaryGetRoutes(testing: Boolean = false) {
    routing {
        // Obtem uma série de comentários
        get("/commentaries") {
            val database = connectFooty(testing)

            when (val reqs = call.request.queryParameters["commentaries"]) {
                null -> call.respond(HttpStatusCode.BadRequest, mapOf("error" to "Missing `commentaries` field with a list of requested commentaries"))
                else -> {
                    val ids = reqs.split(",").map { it.toInt() }
                    val invalid = ids.filter { !database.validateCommentaryById(it) }

                    if (invalid.isNotEmpty()) {
                        call.respond(HttpStatusCode.NotFound, mapOf("error" to "Commentaries not found: $invalid"))
                    } else {
                        val commentaries = database.commentaries.filter { Commentaries.id inList ids }.toList()
                        call.respond(mapOf("commentaries" to commentaries))
                    }
                }
            }
        }
        get("/commentaries/{id}") {
            val database = connectFooty(testing)

            call.parameters["id"]?.let {id ->
                val query = database.commentaries.find { Commentaries.id eq (id.toInt()) }

                if (query == null) {
                    call.respond(HttpStatusCode.NotFound, mapOf("error" to "$id is not a commentary"))
                } else {
                    val body = call.request.queryParameters["summarized"]
                    val commentary = query as Commentary

                    if (body != null) {
                        call.respond(commentary.summarize((body.toInt())))
                    } else  {
                        call.respond(commentary)
                    }
                }
            }
        }
    }
}

fun Application.commentaryPostRoutes(testing: Boolean = false) {
    routing {
        // Posta um comentário em uma review
        post("/commentaries") {
            val database = connectFooty(testing)
            val commentary = call.receive<CommentaryRegistryRequest>()
            val errors = mutableListOf<String>()

            if (!database.validateUserById(commentary.userId)) {
                errors.add("${commentary.userId} is not a registered user")
            }

            if (!database.validateReviewById(commentary.reviewId)) {
                errors.add("${commentary.reviewId} is not a registered review")
            }

            if (errors.isEmpty()) {
                database.insert(Commentaries) {
                    set(it.userId, commentary.userId)
                    set(it.reviewId, commentary.reviewId)
                    set(it.commentary, commentary.commentary)
                    set(it.creationDate, LocalDateTime.now())
                    set(it.lastModifiedDate, LocalDateTime.now())
                }

                call.respond(HttpStatusCode.Created, mapOf("ok" to true))
            } else {
                call.respond(HttpStatusCode.NotFound, mapOf("error" to errors))
            }
        }
    }
}