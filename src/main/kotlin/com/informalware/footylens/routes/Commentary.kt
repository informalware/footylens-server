package com.informalware.footylens.routes

import com.informalware.footylens.data.Commentary
import com.informalware.footylens.data.CommentaryRegistryRequest
import com.informalware.footylens.data.mocks.getCommentaryById
import com.informalware.footylens.data.mocks.getReviewById
import com.informalware.footylens.data.mocks.getUserById
import com.informalware.footylens.data.mocks.registryCommentary
import io.ktor.http.*
import io.ktor.server.application.*
import io.ktor.server.request.*
import io.ktor.server.response.*
import io.ktor.server.routing.*

fun Application.commentaryGetRoutes() {
    routing {
        get("/commentaries/{id}") {
            call.parameters["id"]?.let {id ->
                when (val commentary = getCommentaryById(id.toUInt())) {
                    is Commentary -> {
                        val body = call.receive<Map<String, Int>>()

                        if (body.containsKey("summarized")) {
                            if (body["summarized"]!! > 0) {
                                call.respond(commentary.toSummarized(body["summarized"]!!.toUInt()))
                            } else {
                                call.respond(commentary.toSummarized())
                            }
                        } else  {
                            call.respond(commentary)
                        }
                    }
                    null -> call.respond(HttpStatusCode.NotFound, mapOf("error" to "$id is not a commentary"))
                }
            }
        }
    }
}

fun Application.commentaryPostRoutes() {
    routing {
        // Posta um coment√°rio em uma review
        post("/commentaries") {
            val commentary = call.receive<CommentaryRegistryRequest>()

            if (getUserById(commentary.userId) == null) {
                call.respond(HttpStatusCode.NotFound, mapOf("error" to "${commentary.userId} is not a registered user"))
            } else if (getReviewById(commentary.reviewId) == null) {
                call.respond(HttpStatusCode.NotFound, mapOf("error" to "${commentary.reviewId} is not a registered review"))
            } else {
                registryCommentary(commentary)

                call.respond(HttpStatusCode.Created, mapOf("ok" to true))
            }
        }
    }
}