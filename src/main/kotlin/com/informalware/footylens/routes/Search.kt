package com.informalware.footylens.routes

import com.informalware.footylens.data.Teams
import com.informalware.footylens.data.User
import com.informalware.footylens.data.Users
import com.informalware.footylens.plugins.connectFooty
import com.informalware.footylens.plugins.teams
import com.informalware.footylens.plugins.users
import io.ktor.http.*
import io.ktor.server.application.*
import io.ktor.server.request.*
import io.ktor.server.response.*
import io.ktor.server.routing.*
import org.ktorm.dsl.or
import org.ktorm.entity.filter
import org.ktorm.entity.find
import org.ktorm.entity.map
import org.ktorm.support.postgresql.ilike

fun Application.searchRoutes(testing: Boolean = false) {
    routing {
        get("/search") {
            var term = call.request.queryParameters["term"]?.trim()

            when (term) {
                null -> call.respond(HttpStatusCode.BadRequest, mapOf("error" to "Missing field `term` in request"))
                else -> {
                    val database = connectFooty(testing)

                    if (term.startsWith("@")) term = term.substring(1)
                    term = "%$term%"

                    val users = database.users
                        .filter { (Users.username ilike term) or (Users.display ilike term) }
                        .map { it.id }
                    val teams = database.teams
                        .filter { (Teams.name ilike term) or (Teams.league ilike term) }
                        .map { it.id }

                    call.respond(mapOf("teams" to teams, "users" to users))
                }
            }
        }
    }
}